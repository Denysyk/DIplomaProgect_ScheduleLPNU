import Foundation
import UserNotifications

class NotificationManager {
    static let shared = NotificationManager()
    
    private init() {}
    
    func requestPermission(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().requestAuthorization(
            options: [.alert, .badge, .sound]
        ) { granted, error in
            DispatchQueue.main.async {
                completion(granted)
            }
        }
    }
    
    func scheduleNotification(for task: Task) {
        guard let dueDate = task.dueDate else { return }
        
        let now = Date()
        
        let notifications = [
            (hours: 24, identifier: "task_24h_\(task.id)", title: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è"),
            (hours: 1, identifier: "task_1h_\(task.id)", title: "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ–∑–∞–±–∞—Ä–æ–º!")
        ]
        
        for notification in notifications {
            let notificationDate = Calendar.current.date(byAdding: .hour, value: -notification.hours, to: dueDate)
            
            if let notificationDate = notificationDate, notificationDate > now {
                let content = UNMutableNotificationContent()
                content.title = notification.title
                content.body = task.title
                content.sound = .default
                content.badge = 1
                
                let categoryEmoji = getCategoryEmoji(task.category)
                
                if notification.hours == 24 {
                    content.subtitle = "\(categoryEmoji) \(task.category.rawValue) ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å 24 –≥–æ–¥–∏–Ω–∏"
                } else {
                    content.subtitle = "\(categoryEmoji) \(task.category.rawValue) ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–∞—Å—å 1 –≥–æ–¥–∏–Ω–∞"
                }
                
                let trigger = UNCalendarNotificationTrigger(
                    dateMatching: Calendar.current.dateComponents([.year, .month, .day, .hour, .minute], from: notificationDate),
                    repeats: false
                )
                
                let request = UNNotificationRequest(
                    identifier: notification.identifier,
                    content: content,
                    trigger: trigger
                )
                
                UNUserNotificationCenter.current().add(request)
            }
        }
    }
    
    private func getCategoryEmoji(_ category: Task.TaskCategory) -> String {
        switch category {
        case .personal: return "üë§"
        case .work: return "üíº"
        case .study: return "üìö"
        case .health: return "‚ù§Ô∏è"
        case .shopping: return "üõí"
        case .other: return "üìÅ"
        }
    }
    
    func cancelNotification(for taskId: String) {
        let identifiers = [
            "task_24h_\(taskId)",
            "task_1h_\(taskId)"
        ]
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: identifiers)
    }
    
    func scheduleReminderNotifications() {
        // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: ["daily_reminder"])
        
        let tasks = TaskManager.shared.loadTasks()
        let pendingTasks = tasks.filter { !$0.isCompleted }
        let todayTasks = getTodayTasks(from: tasks)
        
        let notificationContent = createDailyNotificationContent(
            pendingTasks: pendingTasks,
            todayTasks: todayTasks
        )
        
        // –†–∞–Ω–∫–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 9:00
        var dateComponents = DateComponents()
        dateComponents.calendar = Calendar.current
        dateComponents.hour = 9
        dateComponents.minute = 0
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: "daily_reminder", content: notificationContent, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request)
    }
    
    private func getTodayTasks(from tasks: [Task]) -> [Task] {
        let calendar = Calendar.current
        return tasks.filter { task in
            guard let dueDate = task.dueDate, !task.isCompleted else { return false }
            return calendar.isDateInToday(dueDate)
        }
    }
    
    private func createDailyNotificationContent(pendingTasks: [Task], todayTasks: [Task]) -> UNMutableNotificationContent {
        let content = UNMutableNotificationContent()
        content.sound = .default
        
        if todayTasks.isEmpty && pendingTasks.isEmpty {
            content.title = "üéØ –ß–∞—Å –ø–ª–∞–Ω—É–≤–∞—Ç–∏!"
            content.body = "–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å—è–≥–∞–π—Ç–µ —Å–≤–æ—ó—Ö —Ü—ñ–ª–µ–π —Ä–∞–∑–æ–º –∑ ScheduleLPNU"
        } else if todayTasks.isEmpty && !pendingTasks.isEmpty {
            let motivationalMessages = [
                "üí™ –ì–∞—Ä–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ! –£ –≤–∞—Å —î \(pendingTasks.count) –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
                "‚≠ê –ü–æ—á–Ω—ñ—Ç—å –¥–µ–Ω—å –∑ –º–∞–ª–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ –≤–µ–ª–∏–∫–æ—ó –º–µ—Ç–∏!",
                "üöÄ –°—å–æ–≥–æ–¥–Ω—ñ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å —â–æ–± –Ω–∞–±–ª–∏–∑–∏—Ç–∏—Å—è –¥–æ —Å–≤–æ—ó—Ö —Ü—ñ–ª–µ–π!",
                "‚ú® –ù–µ–≤–µ–ª–∏–∫—ñ —â–æ–¥–µ–Ω–Ω—ñ –¥—ñ—ó –≤–µ–¥—É—Ç—å –¥–æ –≤–µ–ª–∏–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
            ]
            content.title = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
            content.body = motivationalMessages.randomElement() ?? motivationalMessages[0]
        } else {
            content.title = "üìã –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
            
            if todayTasks.count == 1 {
                content.body = "–£ –≤–∞—Å 1 –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: \(todayTasks[0].title)"
            } else {
                content.body = "–£ –≤–∞—Å \(todayTasks.count) –∑–∞–≤–¥–∞–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –ß–∞—Å –±—Ä–∞—Ç–∏—Å—è –¥–æ —Ä–æ–±–æ—Ç–∏! üí™"
            }
            
            content.badge = NSNumber(value: todayTasks.count)
        }
        
        return content
    }
    
    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–∂–¥–∏ –ø–ª–∞–Ω—É—î–º–æ –≤–µ—á—ñ—Ä–Ω—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    func scheduleMotivationalReminders() {
        // –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–µ –≤–µ—á—ñ—Ä–Ω—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: ["evening_motivation"])
        
        
        let tasks = TaskManager.shared.loadTasks()
        let completedToday = getCompletedTodayTasks(from: tasks)
        
        let content = UNMutableNotificationContent()
        content.sound = .default
        
        
        if completedToday.isEmpty {
            content.title = "üåô –ö—ñ–Ω–µ—Ü—å –¥–Ω—è"
            content.body = "–ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å - –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ! –ü–ª–∞–Ω—É–π—Ç–µ —Ç–∞ –¥–æ—Å—è–≥–∞–π—Ç–µ –±—ñ–ª—å—à–æ–≥–æ üí™"
        } else {
            content.title = "üéâ –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞!"
            if completedToday.count == 1 {
                content.body = "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ 1 –∑–∞–≤–¥–∞–Ω–Ω—è. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
            } else {
                content.body = "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ \(completedToday.count) –∑–∞–≤–¥–∞–Ω—å. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
            }
        }
        
        var dateComponents = DateComponents()
        dateComponents.calendar = Calendar.current
        dateComponents.hour = 20
        dateComponents.minute = 0
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: "evening_motivation", content: content, trigger: trigger)
        
    }
    
    private func getCompletedTodayTasks(from tasks: [Task]) -> [Task] {
        let calendar = Calendar.current
        return tasks.filter { task in
            guard task.isCompleted else { return false }
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ —Ä–∞—Ö—É—î–º–æ –≤—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
            // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ completedDate –¥–æ Task
            return true
        }
    }
    
    func cancelAllReminders() {
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [
            "daily_reminder",
            "evening_motivation"
        ])
    }
}
