import Foundation
import UserNotifications

class NotificationManager {
    static let shared = NotificationManager()
    
    private init() {}
    
    func requestPermission(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().requestAuthorization(
            options: [.alert, .badge, .sound]
        ) { granted, error in
            DispatchQueue.main.async {
                completion(granted)
            }
        }
    }
    
    func scheduleNotification(for task: Task) {
        guard let dueDate = task.dueDate else { return }
        
        let now = Date()
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ —ñ –∑–∞ 1 –≥–æ–¥–∏–Ω—É –¥–æ –¥–µ–¥–ª–∞–π–Ω—É
        let notifications = [
            (hours: 24, identifier: "task_24h_\(task.id)", title: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è"),
            (hours: 1, identifier: "task_1h_\(task.id)", title: "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ–∑–∞–±–∞—Ä–æ–º!")
        ]
        
        for notification in notifications {
            let notificationDate = Calendar.current.date(byAdding: .hour, value: -notification.hours, to: dueDate)
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤ –º–∏–Ω—É–ª–æ–º—É
            if let notificationDate = notificationDate, notificationDate > now {
                let content = UNMutableNotificationContent()
                content.title = notification.title
                content.body = task.title
                content.sound = .default
                content.badge = 1
                
                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –µ–º–æ–¥–∑—ñ –∑–∞–º—ñ—Å—Ç—å –Ω–∞–∑–≤ —ñ–∫–æ–Ω–æ–∫
                let categoryEmoji = getCategoryEmoji(task.category)
                
                if notification.hours == 24 {
                    content.subtitle = "\(categoryEmoji) \(task.category.rawValue) ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å 24 –≥–æ–¥–∏–Ω–∏"
                } else {
                    content.subtitle = "\(categoryEmoji) \(task.category.rawValue) ‚Ä¢ –ó–∞–ª–∏—à–∏–ª–∞—Å—å 1 –≥–æ–¥–∏–Ω–∞"
                }
                
                let trigger = UNCalendarNotificationTrigger(
                    dateMatching: Calendar.current.dateComponents([.year, .month, .day, .hour, .minute], from: notificationDate),
                    repeats: false
                )
                
                let request = UNNotificationRequest(
                    identifier: notification.identifier,
                    content: content,
                    trigger: trigger
                )
                
                UNUserNotificationCenter.current().add(request)
            }
        }
    }
    
    // –î–û–î–ê–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    private func getCategoryEmoji(_ category: Task.TaskCategory) -> String {
        switch category {
        case .personal: return "üë§"
        case .work: return "üíº"
        case .study: return "üìö"
        case .health: return "‚ù§Ô∏è"
        case .shopping: return "üõí"
        case .other: return "üìÅ"
        }
    }
    
    func cancelNotification(for taskId: String) {
        let identifiers = [
            "task_24h_\(taskId)",
            "task_1h_\(taskId)"
        ]
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: identifiers)
    }
    
    func scheduleReminderNotifications() {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: ["daily_reminder"])
        
        // –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 9:00 —Ä–∞–Ω–∫—É
        let content = UNMutableNotificationContent()
        content.title = "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"
        content.body = "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
        content.sound = .default
        
        var dateComponents = DateComponents()
        dateComponents.calendar = Calendar.current
        dateComponents.hour = 9
        dateComponents.minute = 0
        
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: "daily_reminder", content: content, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request)
    }
}
